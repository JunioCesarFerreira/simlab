{
    "id": null,
    "name": "Performing optimization with NSGA-III",
    "status": "Waiting",
    "created_time": "2025-08-31T17:45:00Z",
    "start_time": null,
    "end_time": null,    
    "generations": [],
    "source_repository_id": "68b5de3d8a4dfe33dc93ff7b",
    "parameters": {
        "strategy": "nsga3",
        "duration": 180,
        "number_of_generations": 5,
        "population_size": 15,
        "number_of_fixed_motes": 13,
        "region": [
            -150,
            -150,
            150,
            150
        ],
        "radius_of_reach": 50,
        "radius_of_interference": 60,
        "mobileMotes": [
            {
                "functionPath": [
                    [
                        "70",
                        "44 + 31 * t"
                    ],
                    [
                        "70 - 140 * t",
                        "75"
                    ],
                    [
                        "-70",
                        "75 - 31 * t"
                    ],
                    [
                        "-70 + 140 * t",
                        "44"
                    ]
                ],
                "isClosed": true,
                "isRoundTrip": false,
                "speed": 5,
                "timeStep": 1,
                "name": "node13",
                "sourceCode": "node.c"
            },
            {
                "functionPath": [
                    [
                        "117 + 24 * np.cos(2 * np.pi * t)",
                        "-28 + 52 * np.sin(2 * np.pi * t)"
                    ]
                ],
                "isClosed": true,
                "isRoundTrip": false,
                "speed": 5,
                "timeStep": 1,
                "name": "node14",
                "sourceCode": "node.c"
            },
            {
                "functionPath": [
                    [
                        "-114*(1-t)-64*t",
                        "61*(1-t)+20*t"
                    ],
                    [
                        "-64",
                        "20-82*t"
                    ],
                    [
                        "-64+136*t",
                        "-62"
                    ]
                ],
                "isClosed": false,
                "isRoundTrip": true,
                "speed": 5,
                "timeStep": 1,
                "name": "node15",
                "sourceCode": "node.c"
            },
            {
                "functionPath": [
                    [
                        "-134+50*t",
                        "16"
                    ],
                    [
                        "-84",
                        "16-98*t"
                    ],
                    [
                        "-84-50*t",
                        "-82"
                    ],
                    [
                        "-134",
                        "-82+98*t"
                    ]
                ],
                "isClosed": true,
                "isRoundTrip": false,
                "speed": 5,
                "timeStep": 1,
                "name": "node16",
                "sourceCode": "node.c"
            },
            {
                "functionPath": [
                    [
                        "114*(1-t)+56*t",
                        "80*(1-t)-33*t"
                    ],
                    [
                        "56 - 77*t",
                        "-33"
                    ]
                ],
                "isClosed": false,
                "isRoundTrip": true,
                "speed": 5,
                "timeStep": 1,
                "name": "node17",
                "sourceCode": "node.c"
            },
            {
                "functionPath": [
                    [
                        "-54+108*t",
                        "-81"
                    ]
                ],
                "isClosed": false,
                "isRoundTrip": true,
                "speed": 5,
                "timeStep": 1,
                "name": "node18",
                "sourceCode": "node.c"
            }
        ]
    },
    "transform_config": {
        "node_col": "node",
        "time_col": "root_time_now",
        "objectives": [
            {
                "name": "p95_latency_ms",
                "kind": "quantile",
                "column": "latency_ms",
                "q": 0.95,
                "goal": "min"
            },
            {
                "name": "total_energy_mJ",
                "kind": "sum_all",
                "column": "total_mj",
                "goal": "min"
            },
            {
                "name": "throughput_cost_inv_median",
                "kind": "inverse_median",
                "column": "throughput_bps",
                "scale": 1000000.0,
                "goal": "min"
            },
            {
                "name": "js_latency_mean_ms",
                "kind": "js_node_mean",
                "column": "latency_ms",
                "goal": "min"
            }
        ],
        "metrics": [
            {
                "name": "latency_ms_mean",
                "kind": "mean",
                "column": "latency_ms"
            },
            {
                "name": "latency_ms_median",
                "kind": "median",
                "column": "latency_ms"
            },
            {
                "name": "response_ms_p95",
                "kind": "quantile",
                "column": "response_ms",
                "q": 0.95
            },
            {
                "name": "energy_cpu_mJ_total",
                "kind": "sum_all",
                "column": "cpu_mj"
            },
            {
                "name": "volume_B_rate_per_s",
                "kind": "sum_rate",
                "column": "volume_B"
            }
        ]
    }
}